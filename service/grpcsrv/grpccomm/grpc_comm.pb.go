// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_comm.proto

/*
Package grpccomm is a generated protocol buffer package.

It is generated from these files:
	grpc_comm.proto

It has these top-level messages:
	CommHeader
	BaseInfo
	XFeignKey
	XAccountKey
	CommRequest
	CommResponse
	InvokeTestEchoRequest
	InvokeTestEchoResponse
*/
package grpccomm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CommHeader 通用业务请求头
// 租户ID仅需要填写一次即可
type CommHeader struct {
	BaseInfo    *BaseInfo    `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	XFeignKey   *XFeignKey   `protobuf:"bytes,2,opt,name=xFeignKey" json:"xFeignKey,omitempty"`
	XAccountKey *XAccountKey `protobuf:"bytes,3,opt,name=xAccountKey" json:"xAccountKey,omitempty"`
}

func (m *CommHeader) Reset()                    { *m = CommHeader{} }
func (m *CommHeader) String() string            { return proto.CompactTextString(m) }
func (*CommHeader) ProtoMessage()               {}
func (*CommHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommHeader) GetBaseInfo() *BaseInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *CommHeader) GetXFeignKey() *XFeignKey {
	if m != nil {
		return m.XFeignKey
	}
	return nil
}

func (m *CommHeader) GetXAccountKey() *XAccountKey {
	if m != nil {
		return m.XAccountKey
	}
	return nil
}

type BaseInfo struct {
	TenantId      string `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	ProductId     string `protobuf:"bytes,2,opt,name=productId" json:"productId,omitempty"`
	ReqTime       int64  `protobuf:"varint,3,opt,name=reqTime" json:"reqTime,omitempty"`
	XApiToken     string `protobuf:"bytes,4,opt,name=xApiToken" json:"xApiToken,omitempty"`
	XAccountToken string `protobuf:"bytes,5,opt,name=xAccountToken" json:"xAccountToken,omitempty"`
	ClientIP      string `protobuf:"bytes,6,opt,name=clientIP" json:"clientIP,omitempty"`
	Platform      string `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	Version       string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	DeviceID      string `protobuf:"bytes,9,opt,name=deviceID" json:"deviceID,omitempty"`
	Guid          string `protobuf:"bytes,10,opt,name=guid" json:"guid,omitempty"`
	AppMsgID      string `protobuf:"bytes,11,opt,name=appMsgID" json:"appMsgID,omitempty"`
}

func (m *BaseInfo) Reset()                    { *m = BaseInfo{} }
func (m *BaseInfo) String() string            { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()               {}
func (*BaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BaseInfo) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *BaseInfo) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *BaseInfo) GetReqTime() int64 {
	if m != nil {
		return m.ReqTime
	}
	return 0
}

func (m *BaseInfo) GetXApiToken() string {
	if m != nil {
		return m.XApiToken
	}
	return ""
}

func (m *BaseInfo) GetXAccountToken() string {
	if m != nil {
		return m.XAccountToken
	}
	return ""
}

func (m *BaseInfo) GetClientIP() string {
	if m != nil {
		return m.ClientIP
	}
	return ""
}

func (m *BaseInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *BaseInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BaseInfo) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *BaseInfo) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *BaseInfo) GetAppMsgID() string {
	if m != nil {
		return m.AppMsgID
	}
	return ""
}

type XFeignKey struct {
	ClientIp    string `protobuf:"bytes,1,opt,name=clientIp" json:"clientIp,omitempty"`
	Device      string `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	Language    string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	TenantId    string `protobuf:"bytes,4,opt,name=tenantId" json:"tenantId,omitempty"`
	ProductId   string `protobuf:"bytes,5,opt,name=productId" json:"productId,omitempty"`
	CompanyName string `protobuf:"bytes,6,opt,name=companyName" json:"companyName,omitempty"`
	Username    string `protobuf:"bytes,7,opt,name=username" json:"username,omitempty"`
	Email       string `protobuf:"bytes,8,opt,name=email" json:"email,omitempty"`
	Phone       string `protobuf:"bytes,9,opt,name=phone" json:"phone,omitempty"`
	RealName    string `protobuf:"bytes,10,opt,name=realName" json:"realName,omitempty"`
	Nickname    string `protobuf:"bytes,11,opt,name=nickname" json:"nickname,omitempty"`
	RoleId      string `protobuf:"bytes,12,opt,name=roleId" json:"roleId,omitempty"`
	UserId      string `protobuf:"bytes,13,opt,name=userId" json:"userId,omitempty"`
}

func (m *XFeignKey) Reset()                    { *m = XFeignKey{} }
func (m *XFeignKey) String() string            { return proto.CompactTextString(m) }
func (*XFeignKey) ProtoMessage()               {}
func (*XFeignKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *XFeignKey) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *XFeignKey) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *XFeignKey) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *XFeignKey) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *XFeignKey) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *XFeignKey) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *XFeignKey) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *XFeignKey) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *XFeignKey) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *XFeignKey) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *XFeignKey) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *XFeignKey) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *XFeignKey) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type XAccountKey struct {
	TenantId    string `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	ServerId    string `protobuf:"bytes,2,opt,name=serverId" json:"serverId,omitempty"`
	Account     string `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	Vendor      string `protobuf:"bytes,4,opt,name=vendor" json:"vendor,omitempty"`
	AccountType string `protobuf:"bytes,5,opt,name=accountType" json:"accountType,omitempty"`
	TenantToken string `protobuf:"bytes,6,opt,name=tenantToken" json:"tenantToken,omitempty"`
}

func (m *XAccountKey) Reset()                    { *m = XAccountKey{} }
func (m *XAccountKey) String() string            { return proto.CompactTextString(m) }
func (*XAccountKey) ProtoMessage()               {}
func (*XAccountKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *XAccountKey) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *XAccountKey) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *XAccountKey) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *XAccountKey) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *XAccountKey) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

func (m *XAccountKey) GetTenantToken() string {
	if m != nil {
		return m.TenantToken
	}
	return ""
}

type CommRequest struct {
	ReqInterface string `protobuf:"bytes,1,opt,name=reqInterface" json:"reqInterface,omitempty"`
	ReqSercice   string `protobuf:"bytes,2,opt,name=reqSercice" json:"reqSercice,omitempty"`
	Header       []byte `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Body         []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CommRequest) Reset()                    { *m = CommRequest{} }
func (m *CommRequest) String() string            { return proto.CompactTextString(m) }
func (*CommRequest) ProtoMessage()               {}
func (*CommRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommRequest) GetReqInterface() string {
	if m != nil {
		return m.ReqInterface
	}
	return ""
}

func (m *CommRequest) GetReqSercice() string {
	if m != nil {
		return m.ReqSercice
	}
	return ""
}

func (m *CommRequest) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CommRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CommResponse struct {
	Result  bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Mcode   string `protobuf:"bytes,3,opt,name=mcode" json:"mcode,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Body    []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CommResponse) Reset()                    { *m = CommResponse{} }
func (m *CommResponse) String() string            { return proto.CompactTextString(m) }
func (*CommResponse) ProtoMessage()               {}
func (*CommResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CommResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CommResponse) GetMcode() string {
	if m != nil {
		return m.Mcode
	}
	return ""
}

func (m *CommResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type InvokeTestEchoRequest struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
}

func (m *InvokeTestEchoRequest) Reset()                    { *m = InvokeTestEchoRequest{} }
func (m *InvokeTestEchoRequest) String() string            { return proto.CompactTextString(m) }
func (*InvokeTestEchoRequest) ProtoMessage()               {}
func (*InvokeTestEchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InvokeTestEchoRequest) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type InvokeTestEchoResponse struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
}

func (m *InvokeTestEchoResponse) Reset()                    { *m = InvokeTestEchoResponse{} }
func (m *InvokeTestEchoResponse) String() string            { return proto.CompactTextString(m) }
func (*InvokeTestEchoResponse) ProtoMessage()               {}
func (*InvokeTestEchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InvokeTestEchoResponse) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func init() {
	proto.RegisterType((*CommHeader)(nil), "grpccomm.CommHeader")
	proto.RegisterType((*BaseInfo)(nil), "grpccomm.BaseInfo")
	proto.RegisterType((*XFeignKey)(nil), "grpccomm.XFeignKey")
	proto.RegisterType((*XAccountKey)(nil), "grpccomm.XAccountKey")
	proto.RegisterType((*CommRequest)(nil), "grpccomm.CommRequest")
	proto.RegisterType((*CommResponse)(nil), "grpccomm.CommResponse")
	proto.RegisterType((*InvokeTestEchoRequest)(nil), "grpccomm.InvokeTestEchoRequest")
	proto.RegisterType((*InvokeTestEchoResponse)(nil), "grpccomm.InvokeTestEchoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommService service

type CommServiceClient interface {
	// RpcRequest 实现请求ID+请求内容的调用接口
	RpcRequest(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*CommResponse, error)
}

type commServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommServiceClient(cc *grpc.ClientConn) CommServiceClient {
	return &commServiceClient{cc}
}

func (c *commServiceClient) RpcRequest(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*CommResponse, error) {
	out := new(CommResponse)
	err := grpc.Invoke(ctx, "/grpccomm.CommService/RpcRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommService service

type CommServiceServer interface {
	// RpcRequest 实现请求ID+请求内容的调用接口
	RpcRequest(context.Context, *CommRequest) (*CommResponse, error)
}

func RegisterCommServiceServer(s *grpc.Server, srv CommServiceServer) {
	s.RegisterService(&_CommService_serviceDesc, srv)
}

func _CommService_RpcRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).RpcRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccomm.CommService/RpcRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).RpcRequest(ctx, req.(*CommRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpccomm.CommService",
	HandlerType: (*CommServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcRequest",
			Handler:    _CommService_RpcRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_comm.proto",
}

func init() { proto.RegisterFile("grpc_comm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x92, 0x36, 0xad, 0x73, 0x93, 0xea, 0x43, 0x03, 0xad, 0xac, 0x0a, 0xa1, 0xca, 0x62,
	0x01, 0x2c, 0x22, 0x51, 0x16, 0xac, 0x58, 0x14, 0x0a, 0xc2, 0xe2, 0x47, 0xc8, 0xcd, 0x82, 0x1d,
	0x72, 0xc7, 0xb7, 0xa9, 0xa9, 0x3d, 0x33, 0x99, 0xb1, 0xa3, 0x66, 0xc1, 0xfb, 0xf0, 0x0e, 0x6c,
	0x78, 0x1b, 0x5e, 0x03, 0xdd, 0xf9, 0x71, 0xdc, 0x22, 0x75, 0xe7, 0x73, 0xee, 0xb9, 0x3f, 0x73,
	0xe6, 0x7a, 0xe0, 0xff, 0x85, 0x56, 0xfc, 0x1b, 0x97, 0x75, 0x3d, 0x53, 0x5a, 0x36, 0x92, 0x45,
	0x44, 0x10, 0x4e, 0x7e, 0x0e, 0x00, 0xde, 0xc8, 0xba, 0x7e, 0x8f, 0x79, 0x81, 0x9a, 0xcd, 0x20,
	0x3a, 0xcf, 0x0d, 0xa6, 0xe2, 0x42, 0xc6, 0x83, 0xa3, 0xc1, 0x93, 0xc9, 0x31, 0x9b, 0x05, 0xed,
	0xec, 0xb5, 0x8f, 0x64, 0x9d, 0x86, 0x3d, 0x87, 0xf1, 0xf5, 0x3b, 0x2c, 0x17, 0xe2, 0x03, 0xae,
	0xe3, 0xa1, 0x4d, 0xb8, 0xbf, 0x49, 0xf8, 0x1a, 0x42, 0xd9, 0x46, 0xc5, 0x5e, 0xc2, 0xe4, 0xfa,
	0x84, 0x73, 0xd9, 0x8a, 0x86, 0x92, 0xb6, 0x6c, 0xd2, 0x7e, 0x2f, 0x69, 0x13, 0xcc, 0xfa, 0xca,
	0xe4, 0xf7, 0x10, 0xa2, 0x30, 0x02, 0x3b, 0x84, 0xa8, 0x41, 0x91, 0x8b, 0x26, 0x2d, 0xec, 0xa0,
	0xe3, 0xac, 0xc3, 0xec, 0x21, 0x8c, 0x95, 0x96, 0x45, 0xcb, 0x29, 0x38, 0xb4, 0xc1, 0x0d, 0xc1,
	0x62, 0xd8, 0xd5, 0xb8, 0x9c, 0x97, 0x35, 0xda, 0xde, 0x5b, 0x59, 0x80, 0x94, 0x77, 0x7d, 0xa2,
	0xca, 0xb9, 0xbc, 0x42, 0x11, 0x6f, 0xbb, 0xbc, 0x8e, 0x60, 0x8f, 0x61, 0x2f, 0x4c, 0xe3, 0x14,
	0x23, 0xab, 0xb8, 0x49, 0xd2, 0x5c, 0xbc, 0x2a, 0x51, 0x34, 0xe9, 0x97, 0x78, 0xc7, 0xcd, 0x15,
	0x30, 0xc5, 0x54, 0x95, 0x37, 0x17, 0x52, 0xd7, 0xf1, 0xae, 0x8b, 0x05, 0x4c, 0x53, 0xad, 0x50,
	0x9b, 0x52, 0x8a, 0x38, 0xb2, 0xa1, 0x00, 0x29, 0xab, 0xc0, 0x55, 0xc9, 0x31, 0x3d, 0x8d, 0xc7,
	0x2e, 0x2b, 0x60, 0xc6, 0x60, 0x7b, 0xd1, 0x96, 0x45, 0x0c, 0x96, 0xb7, 0xdf, 0xa4, 0xcf, 0x95,
	0xfa, 0x64, 0x16, 0xe9, 0x69, 0x3c, 0x71, 0xfa, 0x80, 0x93, 0x3f, 0x43, 0x18, 0x77, 0x97, 0xd2,
	0x9b, 0x55, 0x05, 0x0f, 0x03, 0x66, 0x07, 0xb0, 0xe3, 0xba, 0x78, 0x03, 0x3d, 0xa2, 0x9c, 0x2a,
	0x17, 0x8b, 0x36, 0x5f, 0x38, 0xfb, 0xc6, 0x59, 0x87, 0x6f, 0xdc, 0xc9, 0xf6, 0x5d, 0x77, 0x32,
	0xba, 0x7d, 0x27, 0x47, 0x30, 0xe1, 0xb2, 0x56, 0xb9, 0x58, 0x7f, 0xce, 0x6b, 0xf4, 0xc6, 0xf5,
	0x29, 0xaa, 0xdd, 0x1a, 0xd4, 0x82, 0xc2, 0xde, 0xbb, 0x80, 0xd9, 0x03, 0x18, 0x61, 0x9d, 0x97,
	0x95, 0x77, 0xce, 0x01, 0x62, 0xd5, 0xa5, 0x14, 0xe8, 0x4d, 0x73, 0x80, 0xea, 0x68, 0xcc, 0x2b,
	0xdb, 0xc6, 0xb9, 0xd6, 0x61, 0x8a, 0x89, 0x92, 0x5f, 0xd9, 0x1e, 0xde, 0xb9, 0x80, 0xc9, 0x0f,
	0x2d, 0x2b, 0x4c, 0x8b, 0x78, 0xea, 0xfc, 0x70, 0x88, 0x78, 0x9a, 0x23, 0x2d, 0xe2, 0x3d, 0xc7,
	0x3b, 0x94, 0xfc, 0x1a, 0xc0, 0xa4, 0xb7, 0xc9, 0x77, 0xee, 0xeb, 0x21, 0x44, 0x06, 0xf5, 0xca,
	0x56, 0x71, 0x6e, 0x77, 0x98, 0xf6, 0x22, 0x77, 0x55, 0xbc, 0xdd, 0x01, 0x52, 0xe7, 0x15, 0x8a,
	0x42, 0x6a, 0xef, 0xb5, 0x47, 0xe4, 0xa5, 0x97, 0xcc, 0xd7, 0x0a, 0xbd, 0xd7, 0x7d, 0x8a, 0x14,
	0xae, 0xb7, 0xdb, 0x63, 0xef, 0x76, 0x8f, 0x4a, 0x7e, 0xc0, 0x84, 0x1e, 0x85, 0x0c, 0x97, 0x2d,
	0x9a, 0x86, 0x25, 0x30, 0xd5, 0xb8, 0x4c, 0x45, 0x83, 0xfa, 0x22, 0xe7, 0xe8, 0x0f, 0x70, 0x83,
	0x63, 0x8f, 0x00, 0x34, 0x2e, 0xcf, 0x50, 0xf3, 0xcd, 0xd2, 0xf4, 0x18, 0x1a, 0xf7, 0xd2, 0xbe,
	0x31, 0xf6, 0x1c, 0xd3, 0xcc, 0x23, 0x5a, 0xe1, 0x73, 0x59, 0xac, 0xed, 0x21, 0xa6, 0x99, 0xfd,
	0x4e, 0xbe, 0xc3, 0xd4, 0xb5, 0x37, 0x4a, 0x0a, 0xe3, 0xcc, 0x47, 0xd3, 0x56, 0x8d, 0xed, 0x1c,
	0x65, 0x1e, 0xd1, 0x15, 0xd7, 0x5c, 0x16, 0x61, 0x13, 0x1d, 0x20, 0xcb, 0x6a, 0x34, 0x86, 0x36,
	0xd4, 0x39, 0x13, 0x60, 0xd7, 0x6b, 0xd4, 0xeb, 0xf5, 0x14, 0xf6, 0x53, 0xb1, 0x92, 0x57, 0x38,
	0x47, 0xd3, 0xbc, 0xe5, 0x97, 0x32, 0x1c, 0xfa, 0x1e, 0x6c, 0x99, 0x46, 0xfb, 0xb3, 0xd2, 0x67,
	0xf2, 0x0c, 0x0e, 0x6e, 0x4b, 0xfd, 0x80, 0xff, 0x68, 0x8f, 0x3f, 0x3a, 0x07, 0xcf, 0x50, 0xdb,
	0xdf, 0xe6, 0x15, 0x40, 0xa6, 0x78, 0x28, 0xdd, 0x7b, 0xed, 0x7a, 0x36, 0x1f, 0x1e, 0xdc, 0xa6,
	0x5d, 0xf5, 0xe4, 0xbf, 0xf3, 0x1d, 0xfb, 0x6c, 0xbf, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x09,
	0xc2, 0xd6, 0xfe, 0xc9, 0x05, 0x00, 0x00,
}
